def put_together():
    list1=[]
    for index in range(0,39):
        res = ''.join(map(str,list_df[index]['Text']))
        #print('Result:\n',res,'\n')
        print(f'Result {index}:\n{res}\n')
        list1.append(res)
    return list1

summ_block = put_together()
summ_block


## Skip the block if it's in the list of blocks to skip
def put_together(blocks_to_skip=[]):
    list1 = []
    for index in range(0, 22):
        if index in blocks_to_skip:
            continue  # Skip the block if it's in the list of blocks to skip

        res = ''.join(map(str, list_df[index]['Text']))
        print(f'Result {index}:\n{res}\n')
        list1.append(res)
    return list1


blocks_to_skip = [2,4,12]  # List of block numbers to skip
result_list = put_together(blocks_to_skip)



summ_block_test = put_together(blocks_to_skip)
summ_block_test



from transformers import pipeline
# Create a summarization pipeline with the specified model.
summarizer = pipeline("summarization", model="philschmid/bart-large-cnn-samsum")

# Define a function to perform summarization.
def final_summ():
    my_list = []

    # Iterate through the comments in 'summ_block'
    for index in range(len(summ_block_test)):
        comment = summ_block_test[index]
        prova = summarizer(comment)
        my_list.append(prova)

    return my_list

# Call the 'final_summ' function to generate summaries.
summ_block_test = final_summ()
summ_block_test


import pickle


picklefile = "df_1_computer_summ.pkl"
with open(picklefile, "wb") as pkl_wb_obj:
    pickle.dump(summ_block_test, pkl_wb_obj)


picklefile = "df_1_computer_summ.pkl"
with open(picklefile, "rb") as pkl_rb_obj:
	summ_block = pickle.load(pkl_rb_obj)
print(summ_block)